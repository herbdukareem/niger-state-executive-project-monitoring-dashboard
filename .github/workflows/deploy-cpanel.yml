name: Deploy to SmartWeb cPanel

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath, curl, openssl, pdo, tokenizer, xml, ctype, json

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install --optimize-autoloader --no-dev --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Generate Wayfinder Types
      run: php artisan wayfinder:generate --with-form

    - name: Build assets
      run: npm run build

    - name: Create production .env file
      run: |
        echo "APP_NAME=\"Niger State Project Monitoring\"" > .env.production
        echo "APP_ENV=production" >> .env.production
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
        echo "APP_DEBUG=false" >> .env.production
        echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
        echo "" >> .env.production
        echo "LOG_CHANNEL=stack" >> .env.production
        echo "LOG_DEPRECATIONS_CHANNEL=null" >> .env.production
        echo "LOG_LEVEL=error" >> .env.production
        echo "" >> .env.production
        echo "DB_CONNECTION=mysql" >> .env.production
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.production
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.production
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
        echo "" >> .env.production
        echo "MAIL_MAILER=smtp" >> .env.production
        echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env.production
        echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env.production
        echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env.production
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.production
        echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env.production
        echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env.production
        echo "MAIL_FROM_NAME=\"Niger State Project Monitoring\"" >> .env.production
        echo "" >> .env.production
        echo "SESSION_DRIVER=database" >> .env.production
        echo "SESSION_LIFETIME=120" >> .env.production
        echo "SESSION_ENCRYPT=false" >> .env.production
        echo "SESSION_PATH=/" >> .env.production
        echo "SESSION_DOMAIN=null" >> .env.production

    - name: Prepare deployment files
      run: |
        rm -rf node_modules .git .env.example .gitignore .gitattributes vite.config.js
        rm -f package.json package-lock.json composer.lock README.md
        mv .env.production .env
        echo "Options -MultiViews -Indexes" > public/.htaccess
        echo "RewriteEngine On" >> public/.htaccess
        echo "RewriteCond %{REQUEST_FILENAME} !-f" >> public/.htaccess
        echo "RewriteCond %{REQUEST_FILENAME} !-d" >> public/.htaccess
        echo "RewriteRule ^.*$ /index.php [L]" >> public/.htaccess
        echo "ServerSignature Off" >> public/.htaccess
        echo "Header always set X-Content-Type-Options nosniff" >> public/.htaccess
        echo "Header always set X-Frame-Options DENY" >> public/.htaccess
        echo "Header always set X-XSS-Protection \"1; mode=block\"" >> public/.htaccess

    - name: Upload via SFTP
      uses: pressidium/lftp-mirror-action@v1
      with:
        host: ${{ secrets.CPANEL_SSH_HOST }}
        port: ${{ secrets.CPANEL_SSH_PORT }}
        user: ${{ secrets.CPANEL_SSH_USERNAME }}
        pass: ${{ secrets.CPANEL_SSH_PASSWORD }}
        localDir: './'
        remoteDir: ${{ secrets.CPANEL_SERVER_DIR }}
        onlyNewer: true                                   # Optional but recommended
        reverse: true                                    # Mirrors local to remote
        parallel: 2 
        options: '--exclude-glob .git* --exclude-glob node_modules --exclude-glob .github'

    - name: Execute post-deployment commands via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CPANEL_SSH_HOST }}
        username: ${{ secrets.CPANEL_SSH_USERNAME }}
        password: ${{ secrets.CPANEL_SSH_PASSWORD }}
        port: ${{ secrets.CPANEL_SSH_PORT }}
        script: |
          cd ${{ secrets.CPANEL_DEPLOYMENT_PATH }}

          # Set proper permissions
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          chmod -R 777 storage bootstrap/cache

          # Clear all caches first
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear

          # Run migrations with verbose output
          echo "üîÑ Running database migrations..."
          php artisan migrate --force --verbose

          # Check if migrations ran successfully
          if [ $? -eq 0 ]; then
            echo "‚úÖ Migrations completed successfully"
          else
            echo "‚ùå Migrations failed!"
            exit 1
          fi

          # Cache configurations for production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          echo "‚úÖ Deployment complete!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployed to SmartWeb successfully!"
        else
          echo "‚ùå Deployment failed. Check logs."
        fi