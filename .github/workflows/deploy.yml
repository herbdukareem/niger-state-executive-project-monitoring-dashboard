name: Deploy to SmartWeb Hosting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install PHP Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Install NPM Dependencies
      run: npm ci

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS testing;"

    - name: Run Database Migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan migrate --force

    - name: Run Database Seeders
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: |
        php artisan db:seed --class=RolePermissionSeeder --force
        php artisan db:seed --class=UserSeeder --force

    - name: Build Frontend Assets
      run: npm run build

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install PHP Dependencies (Production)
      run: composer install --optimize-autoloader --no-dev

    - name: Install NPM Dependencies
      run: npm ci

    - name: Build Production Assets
      run: npm run build

    - name: Create deployment archive
      run: |
        # Remove development files and directories
        rm -rf node_modules
        rm -rf .git
        rm -rf tests
        rm -rf .github
        rm -f .env.example
        rm -f .gitignore
        rm -f .gitattributes
        rm -f phpunit.xml
        rm -f vite.config.js
        rm -f package.json
        rm -f package-lock.json
        rm -f composer.lock
        
        # Create deployment package
        tar -czf deployment.tar.gz .

    - name: Deploy to SmartWeb via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: ${{ secrets.FTP_SERVER_DIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/tests/**
          **/.github/**
          .env.example
          .gitignore
          .gitattributes
          phpunit.xml
          vite.config.js
          package.json
          package-lock.json
          composer.lock
          deployment.tar.gz

    - name: Run post-deployment commands via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd ${{ secrets.DEPLOYMENT_PATH }}
          
          # Set proper permissions
          chmod -R 755 storage
          chmod -R 755 bootstrap/cache
          
          # Clear and cache Laravel configurations
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear
          
          # Run database migrations (if needed)
          php artisan migrate --force
          
          # Cache configurations for production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          echo "Deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to SmartWeb completed successfully!"
        else
          echo "❌ Deployment failed!"
        fi
